---
metadata:
    display_name: UCSD Problem with Adaptive Hint
    markdown: !!null
data: |
    <problem>
      <text>

        <script type="loncapa/python">
    # random variables
    n = random.randrange(3,6,1)
          
    # solution string
    solution1 = "(26^{0})-(25^{0})".format(n)
    solution2 = "8"
    solutions = [solution1, solution2]

    # hint id
    hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
        </script>

        <script type="text/javascript">
          //fill in number of hint
            var hint_number = 2;

          //fill in hint input box id
            var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                    "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

          //fill in problem input box id
            var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
                   "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];

          //fill in hint text id. Need to match the hint_id from above.
            var hintTextIds = ["cse103fall2016week1problem1part1",
                      "cse103fall2016week1problem1part2"];
        </script>

        <p>How many strings of length $n2 consisting of lower case English letters, and including at least one "x", are there?</p>
        <customresponse cfn="check" expect="\[$solution1\]">
          <textline/>
          <hintgroup hintfn="hint_fn"/>
        </customresponse>

        <p>Question of part 2 here</p>
        <customresponse cfn="check" expect="\[$solution2\]">
          <textline/>
          <hintgroup hintfn="hint_fn"/>
        </customresponse>

        
        


      <script type="loncapa/python">
    from hint import evaluate
    from hint.get_hint import get_hint

    # grader of the problem
    def check(expect, ans):
      return evaluate.evaluate(expect, ans)

    # hint function
    def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
      aid = answer_ids[0]
      ans = str(student_answers[aid])
      i = int(aid[-3])-2

      if ans == "":
        return
      key = new_cmap.keys()[0]
      if new_cmap[key]['correctness'] == "correct":
        return

      hint = get_hint(solutions[i], ans, hint_text_id, i)
      new_cmap.set_hint_and_mode(aid,hint,'always')
        </script>

            
        <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
        <script type="text/javascript">                             
          for (var i=0; i != hint_number; i++) {
            hide_hint(i);
          }
          show_hint(hint_number);
        </script>

      </text>
    </problem>