---
metadata:
    display_name: UCSD Problem with Adaptive Hint and Variables
    markdown: !!null
data: |
    <problem>
      <text>

        <script type="loncapa/python">
    # variable names and values
    # if multiple variables, the number of values to test should be the same
    variable_values = {'n':[1,2,3], 'k':[4,5,6]}

    # value index used to extract hint
    index_for_hint = 2
          
    # random variables
    r = random.randrange(3,6,1)
          
    # solution string
    solution = "26^n+k+{0}".format(r)
    solutions = [solution]

    # hint id
    hint_text_id = ["cse103fall2016week1problem1part1"]
      </script>
        
      <script type="text/javascript">
        //fill in number of hint
          var hint_number = 1;

        //fill in hint input box id
          var hintId = ["input_57ccdc78397649aca59b419c95573254_2_1"];

        //fill in problem input box id
          var proId = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1"];

        //fill in hint text id. Need to match the hint_id from above
          var hintTextId = ["cse103fall2016week1problem1part1"];
      </script>
      
      <p>How many strings of length \(n\) consisting of lower case English letters are there?</p>
      <customresponse cfn="check" expect="\[$solution\]">
        <textline/>
        <hintgroup hintfn="hint_fn"/>
      </customresponse>






      <script type="loncapa/python">
    from hint import evaluate
    from hint.get_hint import get_hint_w_variables

    # grader of the problem
    def check(expect, ans):
      return evaluate.evaluate_w_variables(expect, ans, variable_values)

    # hint function
    def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
      aid = answer_ids[0]
      ans = str(student_answers[aid])
      i = int(aid[-3])-2

      if ans == "":
        return
      key = new_cmap.keys()[0]
      if new_cmap[key]['correctness'] == "correct":
        return

      hint = get_hint_w_variables(solutions[i], ans, hint_text_id, i, variable_values)
      new_cmap.set_hint_and_mode(aid,hint,'always')
        </script>

            
        <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
        <script type="text/javascript">                             
          for (var i=0; i != hint_number; i++) {
            hide_hint(i);
          }
          show_hint(hint_number);
        </script>

      </text>
    </problem>
